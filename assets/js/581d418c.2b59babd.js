"use strict";(self.webpackChunkviable_docs=self.webpackChunkviable_docs||[]).push([[525],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(a),d=i,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1563:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},assets:function(){return u},toc:function(){return m},default:function(){return d}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),l=["components"],o={sidebar_position:6},p="Syntax",s={unversionedId:"syntax",id:"syntax",title:"Syntax",description:"Quantifiers",source:"@site/docs/syntax.md",sourceDirName:".",slug:"/syntax",permalink:"/viable/docs/syntax",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"sidebar",previous:{title:"CLI",permalink:"/viable/docs/cli"},next:{title:"Future Feature Status",permalink:"/viable/docs/status"}},u={},m=[{value:"Quantifiers",id:"quantifiers",level:2},{value:"Symbols",id:"symbols",level:2},{value:"Special Symbols",id:"special-symbols",level:2},{value:"Character Ranges",id:"character-ranges",level:2},{value:"Literals",id:"literals",level:2},{value:"Raw",id:"raw",level:2},{value:"Groups",id:"groups",level:2},{value:"Assertions",id:"assertions",level:2},{value:"Variables",id:"variables",level:2},{value:"Extras",id:"extras",level:2}],c={toc:m};function d(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"syntax"},"Syntax"),(0,r.kt)("h2",{id:"quantifiers"},"Quantifiers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"... of")," - used to express a specific amount of a pattern. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"{5}")," (assuming ",(0,r.kt)("inlineCode",{parentName:"li"},"5 of ..."),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"... to ... of")," - used to express an amount within a range of a pattern. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"{5,9}")," (assuming ",(0,r.kt)("inlineCode",{parentName:"li"},"5 to 9 of ..."),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"over ... of")," - used to express more than an amount of a pattern. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"{6,}")," (assuming ",(0,r.kt)("inlineCode",{parentName:"li"},"over 5 of ..."),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"some of")," - used to express 1 or more of a pattern. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"+")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"any of")," - used to express 0 or more of a pattern. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"*")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"option of")," - used to express 0 or 1 of a pattern. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"?"))),(0,r.kt)("p",null,"All quantifiers can be preceded by ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy")," to match the least amount of characters rather than the most characters (greedy). Equivalent to regex  ",(0,r.kt)("inlineCode",{parentName:"p"},"+?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*?"),", etc."),(0,r.kt)("h2",{id:"symbols"},"Symbols"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<char>")," - matches any single character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<whitespace>")," - matches any kind of whitespace character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\s")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"[ \\t\\n\\v\\f\\r]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<newline>")," - matches a newline character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\n"),"  or ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<tab>")," - matches a tab character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\t")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<return>")," -  matches a carriage return character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\r")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<feed>")," - matches a form feed character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\f")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<null>")," - matches a null characther. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<digit>")," - matches any single digit. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\d")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<vertical>")," - matches a vertical tab character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\v")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<word>")," - matches a word character (any latin letter, any digit or an underscore). equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\w")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"[a-zA-Z0-9_]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<alphabetic>")," - matches any single latin letter. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"[a-zA-Z]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<alphanumeric>")," - matches any single latin letter or any single digit. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"[a-zA-Z0-9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<boundary>")," - Matches a character between a character matched by ",(0,r.kt)("inlineCode",{parentName:"li"},"<word>")," and a character not matched by ",(0,r.kt)("inlineCode",{parentName:"li"},"<word>")," without consuming the character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"\\b")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<backspace>")," - matches a backspace control character. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"[\\b]"))),(0,r.kt)("p",null,"All symbols can be preceeded with ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," to match any character other than the symbol"),(0,r.kt)("h2",{id:"special-symbols"},"Special Symbols"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<start>")," - matches the start of the string. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"^")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<end>")," - matches the end of the string. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"$"))),(0,r.kt)("h2",{id:"character-ranges"},"Character Ranges"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"... to ...")," - used with digits or alphabetic characters to express a character range. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"[5-9]")," (assuming ",(0,r.kt)("inlineCode",{parentName:"li"},"5 to 9"),") or ",(0,r.kt)("inlineCode",{parentName:"li"},"[a-z]")," (assuming ",(0,r.kt)("inlineCode",{parentName:"li"},"a to z"),")")),(0,r.kt)("h2",{id:"literals"},"Literals"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"..."')," or ",(0,r.kt)("inlineCode",{parentName:"li"},"'...'")," - used to mark a literal part of the match. Viable will automatically escape characters as needed. Quotes (of the same kind surrounding the literal) should be escaped")),(0,r.kt)("h2",{id:"raw"},"Raw"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"\\`...\\`")," - added directly to the output without any escaping")),(0,r.kt)("h2",{id:"groups"},"Groups"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"capture")," - used to open a ",(0,r.kt)("inlineCode",{parentName:"li"},"capture")," or named ",(0,r.kt)("inlineCode",{parentName:"li"},"capture")," block. captured patterns are later available in the list of matches (either positional or named). equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"(...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"match")," - used to open a ",(0,r.kt)("inlineCode",{parentName:"li"},"match")," block, matches the contents without capturing. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"(?:...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"either")," - used to open an ",(0,r.kt)("inlineCode",{parentName:"li"},"either")," block, matches one of the statements within the block. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"(?:...|...)"))),(0,r.kt)("h2",{id:"assertions"},"Assertions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ahead")," - used to open an ",(0,r.kt)("inlineCode",{parentName:"li"},"ahead")," block. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"(?=...)"),". use after an expression"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"behind")," - used to open an ",(0,r.kt)("inlineCode",{parentName:"li"},"behind")," block. equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"li"},"(?<=...)"),". use before an expression")),(0,r.kt)("p",null,"Assertions can be preceeded by ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," to create a negative assertion (equivalent to regex ",(0,r.kt)("inlineCode",{parentName:"p"},"(?!...)"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"(?<!...)"),")"),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"let .variable_name = { ... }")," - defines a variable from a block of statements. can later be used with ",(0,r.kt)("inlineCode",{parentName:"p"},".variable_name"),". Variables must be declared before being used. Variable declarations cannot reference the created variable (recursion). Variable invocations cannot be quantified directly, use a group if you want to quantify a variable invocation"),(0,r.kt)("p",{parentName:"li"},"example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'let .a_and_b = {\n  "a";\n  "b";\n}\n\n.a_and_b;\n"c";\n\n// abc\n')))),(0,r.kt)("h2",{id:"extras"},"Extras"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/* ... */"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"// ...")," - used to mark comments (note: ",(0,r.kt)("inlineCode",{parentName:"li"},"// ...")," comments must be on separate line)")))}d.isMDXComponent=!0}}]);